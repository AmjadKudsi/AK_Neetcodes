#question 4: Given an array of strings strs, group the anagrams together. You can return the answer in any order.

#Initial solution: *Rejected*

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        output = []

        for s in strs:
            print(s)
            new = 0
            for i,o in enumerate(output):
                if sorted(s) == sorted(o[0]):
                    output[i].append(s)
                    new=1
                    print(output) 
            if new==0:
                output.append([s])
                print(output)
            
        return output

#Optimized solution:

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        anagrams_map = defaultdict(list)
        
        for word in strs:
            sorted_word = ''.join(sorted(word))
            anagrams_map[sorted_word].append(word)
        
        return list(anagrams_map.values())

#concepts learned: A defaultdict is a subclass of the built-in dict class that provides a default value for keys that haven't been set yet. In this case, the default value is an empty list.

sorted_word = ''.join(sorted(word))
The sorted() function sorts the characters of the current word in lexicographic order. This returns a list of characters in sorted order.
''.join() then joins these sorted characters back into a single string. This results in sorted_word, which is the sorted version of the current word.


#Another solution:

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        res = defaultdict(list)
        
        for s in strs:
            count = [0]*26
            
            for c in s:
                count[ord(c) - ord("a")] += 1
                
            res[tuple(count)].append(s)
        
        return res.values()

#concepts learned: index of dict cannot be a list, so it was converted into tuple, as it is immutable.
